<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>host = network_create_server(network_socket_tcp, global.port, 2);
write_buffer = buffer_create(params.buffer_size, buffer_fixed, 1);

client_count = 0;
client[1] = noone;
client[0] = noone;

state = 0; //0 = waiting for ready, 1 = in play
turn = 0;

ready[1] = false;
ready[0] = false;

captured_a = scr_type_count_array();
captured_b = scr_type_count_array();

for (var i = 9; i &gt;= 0; --i) {
    for (var j = 7; j &gt;= 0; --j) {
        board[i,j] = instance_create(0,0,obj_server_tile);
        instance_deactivate_object(board[i,j]);
    }
}

if (global.self_host = true) {
    global.ip = "127.0.0.1";
    global.player = 0;
    instance_create(0,0,obj_client);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(host);
buffer_delete(write_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var v_event_type = ds_map_find_value(async_load, "type");
switch(v_event_type){
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        if (client[0] == noone) {
            ++client_count;
            client[0] = socket;
            if (client[1] != noone) { //notify B that A connected
                scr_server_send_partner_connected(1);
            }
            if (ready[0]) { //could be server state 0 (still waiting on partner) or state 1 (in play)
                scr_server_send_refresh(0);
            } else {
                scr_server_send_init(0);
            }
        } else if (client[1] == noone) {
            ++client_count;
            client[1] = socket;
            if (client[0] != noone) { //notify A that B connected
                scr_server_send_partner_connected(0);
            }
            if (ready[1]) { //could be server state 0 (still waiting on partner) or state 1 (in play)
                scr_server_send_refresh(1);
            } else {
                scr_server_send_init(1);
            }
        }
        break;
    case network_type_disconnect: //TODO: send disconnect messages
        var socket = ds_map_find_value(async_load, "socket");
        if (socket == client_a) {
            client_a = noone;
            --client_count;
        } else if (socket == client_b) {
            client_b = noone;
            --client_count;
        }
        break;
    case network_type_data:
        var read_buffer = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        buffer_seek(read_buffer, buffer_seek_start, 0);
        scr_server_incoming_packets(read_buffer, socket, socket == client[1]);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
