<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blank_tile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>parent = obj_client;
type = 0; //0 = blank, 1-13 = F-B
state = 0; //0 = waiting to be placed, 1 = unlocked but placed, 2 = in play, 3 = dead
owner = 0; //0 = this player, 1 = opponent, 2 null
grid_x = -1;
grid_y = -1;

slide_x = -1;
slide_y = -1;

revealed = false;
just_revealed = false;
moved = false;
grabbed = false; //grabbed freely during setup
sliding = false; //moving without user interaction
active = false; //grabbed in a constrained fashion during play
selected = false; //highlighted spotter waiting for user input

up_range = 0;
left_range = 0;
right_range = 0;
down_range = 0;
can_spot = false;

grab_offset_x = 0;
grab_offset_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (grabbed == true) {
    x = mouse_x+grab_offset_x;
    y = mouse_y+grab_offset_y;
} else if (active == true) {
    var dir = point_direction(params.board_offset_x + grid_x*params.board_grid_size, params.board_offset_y + grid_y*params.board_grid_size,mouse_x+grab_offset_x, mouse_y+grab_offset_y); 
    if        ((dir &gt;=  45 || (dir &gt;=   0 &amp;&amp; right_range == 0)) &amp;&amp; (dir &lt; 135 || (dir &lt; 180 &amp;&amp;  left_range == 0))) { //treat as up
        x=params.board_offset_x + grid_x*params.board_grid_size;
        y=clamp(mouse_y+grab_offset_y, params.board_offset_y + (grid_y-up_range)*params.board_grid_size, params.board_offset_y + grid_y*params.board_grid_size);
    } else if ((dir &gt;= 135 || (dir &gt;=  90 &amp;&amp;    up_range == 0)) &amp;&amp; (dir &lt; 225 || (dir &lt; 270 &amp;&amp;  down_range == 0))) { //treat as left
        y=params.board_offset_y + grid_y*params.board_grid_size;
        x=clamp(mouse_x+grab_offset_x, params.board_offset_x + (grid_x-left_range)*params.board_grid_size, params.board_offset_x + grid_x*params.board_grid_size);
    } else if ((dir &gt;= 225 || (dir &gt;= 180 &amp;&amp;  left_range == 0)) &amp;&amp; (dir &lt; 315 || (dir &lt; 360 &amp;&amp; right_range == 0))) { //treat as down
        x=params.board_offset_x + grid_x*params.board_grid_size;
        y=clamp(mouse_y+grab_offset_y, params.board_offset_y + grid_y*params.board_grid_size, params.board_offset_y + (grid_y+down_range)*params.board_grid_size);
    } else if ((dir &gt;= 315 || (dir &gt;= 270 &amp;&amp;  down_range == 0)) || (dir &lt;  45 || (dir &lt;  90 &amp;&amp;    up_range == 0))) { //treat as right
        y=params.board_offset_y + grid_y*params.board_grid_size;
        x=clamp(mouse_x+grab_offset_x, params.board_offset_x + grid_x*params.board_grid_size, params.board_offset_x + (grid_x+right_range)*params.board_grid_size);
    }
} else if (sliding == true) {
    if (point_distance(x,y,slide_x, slide_y) &lt; speed) {
        x = slide_x;
        y = slide_y;
        speed = 0;
        depth = 0;
        sliding = false;
        if (parent.move_animation_waiting != 0) {
            if (parent.move_animation_waiting == 1) {
                var xdef = round((x-params.board_offset_x)/params.board_grid_size);
                var ydef = round((y-params.board_offset_y)/params.board_grid_size);
                if (spot_waiting != 0) {
                    var defender = parent.board[xdef, ydef-1];
                    if (xdef != grid_x) || (ydef != grid_y) { //we moved the spotter as well
                        parent.board[grid_x, grid_y] = noone;
                        parent.board[xdef, ydef] = self; //no need to check because we can't spot if we weren't moving into a null spot
                    }
                    if (spot_waiting == defender.type) { //killed via spotting
                        parent.board[xdef, ydef+1] = noone;
                        defender.state = 3;
                        parent.enemy_tiles[defender.type] -= 1;
                        defender.xstart = room_width - scr_type_pos_x(defender.type,parent.enemy_tiles[defender.type]);
                        defender.ystart = room_height - scr_type_pos_y(defender.type,parent.enemy_tiles[defender.type]);
                        with (defender) { //move to start position
                            scr_slide(xstart, ystart);
                        }
                        parent.move_animation_waiting = 3;
                    }
                    
                } else {
                    var defender = parent.board[xdef, ydef];
                    parent.board[grid_x, grid_y] = noone; //free our old spot
                    //parent.board[xdef, ydef] = noone; //free defending spot in case of tie
                    switch(scr_battle_eval(type, defender.type)) {
                        case 0: //attacker won
                            parent.board[xdef, ydef] = self;
                            grid_x = xdef;
                            grid_y = ydef;
                            defender.state = 3;
                            parent.enemy_tiles[defender.type] -= 1;
                            defender.xstart = room_width - scr_type_pos_x(defender.type,parent.enemy_tiles[defender.type]);
                            defender.ystart = room_height - scr_type_pos_y(defender.type,parent.enemy_tiles[defender.type]);
                            with (defender) { //move to start position
                                scr_slide(xstart, ystart);
                            }
                            parent.move_animation_waiting = 3;
                            break;
                        case 1: //defender won
                            state = 3;
                            scr_slide(xstart, ystart);
                            parent.move_animation_waiting = 3;
                            break;
                        case 2: //tie
                            parent.board[xdef, ydef] = noone;
                            parent.enemy_tiles[defender.type] -= 1;
                            defender.xstart = room_width - scr_type_pos_x(defender.type,parent.enemy_tiles[defender.type]);
                            defender.ystart = room_height - scr_type_pos_y(defender.type,parent.enemy_tiles[defender.type]);
                            with (defender) { //move to start position
                                scr_slide(xstart, ystart);
                            }
                            state = 3;
                            scr_slide(xstart, ystart);
                            parent.move_animation_waiting = 4;
                            break;
                    }
                }
            } else if (parent.move_animation_waiting == 4) {
                parent.move_animation_waiting = 3;
            } else if (parent.move_animation_waiting == 3) {
                parent.move_animation_waiting = 0;
                if (turn_waiting) global.turn = true; //animation is done, if our turn
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Handled by obj_client</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 1) { //right click resets to starting position
    with (obj_client) { //only one of these should exist
        board[other.grid_x, other.grid_y] = noone;
        if (placed == 30) with (obj_button_submit) instance_destroy(); //no longer permitted to submit
        placed -= 1;
    }
    state = 0;
    grabbed = false; //just in case
    
    scr_slide(xstart, ystart);    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((state == 0 || state == 1 &amp;&amp; sliding == false)) { //free or unlocked in a grid spot
    grabbed = true;
    speed = 0;
    depth = -10; //draw on top
    grab_offset_x = x - mouse_x; //move from where we grabbed it instead of the origin of the tile
    grab_offset_y = y - mouse_y;
} else if (global.turn &amp;&amp; state == 2 &amp;&amp; sliding==false) { //verify we aren't sliding to ensure we can't activate two tiles
    var valid_action = false;
    //spotter can act without moving if an enemy is in front of him
    if (type==tile_type.spotter_1 &amp;&amp; (grid_y &gt;= 1) &amp;&amp; parent.board[grid_x, grid_y-1]!=noone &amp;&amp; parent.board[grid_x, grid_y-1].owner==1) {
        can_spot = true;
        valid_action=true;
    } else {
        can_spot = false;
    }
    
    //moving types may act if they have space
    if (type==tile_type.spy || type==tile_type.spotter_1 || type==tile_type.scout_2 || type==tile_type.miner_3 || type==tile_type.sergeant_4 || type==tile_type. lieutenant_5 ||
        type==tile_type.captain_6 || type==tile_type.major_7 || type==tile_type.colonel_8 || type==tile_type.general_9 || type==tile_type.marshal_10) {
        if (grid_y &gt;= 1 &amp;&amp; (parent.board[grid_x, grid_y-1]==noone || parent.board[grid_x, grid_y-1].owner==1)) { //can move up
            up_range = 1;
            valid_action=true;
            if (type == tile_type.scout_2) {
                for (var i = 2; i &lt; 8; ++i) {
                    if (grid_y-i &lt; 0) break;
                    if (parent.board[grid_x, grid_y-i]==noone) {
                        up_range += 1;
                    } else if (parent.board[grid_x, grid_y-i].owner==1) { //we can attack, but go no further
                        up_range += 1;
                        break;
                    } else break; //neither open space or enemy tiles in front
                }
            }
        } else {
            up_range = 0;
        }
        if (grid_y &lt;= 6 &amp;&amp; (parent.board[grid_x, grid_y+1]==noone || parent.board[grid_x, grid_y+1].owner==1)) { //can move down
            down_range = 1;
            valid_action=true;
            if (type == tile_type.scout_2) {
                for (var i = 2; i &lt; 8; ++i) {
                    if (grid_y+i &gt; 7) break;
                    if (parent.board[grid_x, grid_y+i]==noone) {
                        down_range += 1;
                    } else if (parent.board[grid_x, grid_y+i].owner==1) { //we can attack, but go no further
                        down_range += 1;
                        break;
                    } else break; //neither open space or enemy tiles in front
                }
            }
        } else {
            down_range = 0;
        }
        if (grid_x &gt;= 1 &amp;&amp; (parent.board[grid_x-1, grid_y]==noone || parent.board[grid_x-1, grid_y].owner==1)) { //can move left
            left_range = 1;
            valid_action=true;
            if (type == tile_type.scout_2) {
                for (var i = 2; i &lt; 10; ++i) {
                    if (grid_x-i &lt; 0) break;
                    if (parent.board[grid_x-i, grid_y]==noone) {
                        left_range += 1;
                    } else if (parent.board[grid_x-i, grid_y].owner==1) { //we can attack, but go no further
                        left_range += 1;
                        break;
                    } else break; //neither open space or enemy tiles in front
                }
            }
        } else {
            left_range = 0;
        }
        if (grid_x &lt;= 8 &amp;&amp; (parent.board[grid_x+1, grid_y]==noone || parent.board[grid_x+1, grid_y].owner==1)) { //can move right
            right_range = 0;
            valid_action=true;
            if (type == tile_type.scout_2) {
                for (var i = 2; i &lt; 10; ++i) {
                    if (grid_x+i &gt; 9) break;
                    if (parent.board[grid_x+i, grid_y]==noone) {
                        right_range += 1;
                    } else if (parent.board[grid_x+i, grid_y].owner==1) { //we can attack, but go no further
                        right_range += 1;
                        break;
                    } else break; //neither open space or enemy tiles in front
                }
            }
        } else {
            right_range = 0;
        }
        
    } 
    if (valid_action) {
        with (parent) {
            if board[sel_x, sel_y]!=noone {
                board[sel_x, sel_y].selected = false; //doesn't matter if it wasn't selected beforehand
            }
        }
        with (obj_button_spot) { //remove the spot button, we're activating a different tile
            instance_destroy();
        }
        grab_offset_x = x - mouse_x; //move from where we grabbed it instead of the origin of the tile
        grab_offset_y = y - mouse_y;
        active = true;
        speed = 0;
        depth = -10; //draw on top
    }
         

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TODO: options for images instead of text
var spr_index = 0;
if (owner==0) {
    if (global.track_my_moved &amp;&amp; moved) spr_index += 2;
    if (global.player==0) spr_index += 1; else spr_index += 2;    
} else if (owner==1) {
    if (global.track_enemy_moved &amp;&amp; moved) spr_index += 2;
    if (global.player==1) spr_index += 1; else spr_index += 2;
}
draw_sprite(spr_blank_tile, spr_index, x, y); 

var display_character = '';
switch (type) { 
    case 1: //flag
        display_character = 'F';
        break;
    case 2: //spy
        display_character = 'S';
        break;
    case 3: //spotter
        display_character = '1';
        break;
    case 4: //scout
        display_character = '2';
        break;
    case 5: //miner
        display_character = '3';
        break;
    case 6: //4
        display_character = '4';
        break;
    case 7: //5
        display_character = '5';
        break;
    case 8: //6
        display_character = '6';
        break;
    case 9: //7
        display_character = '7';
        break;
    case 10: //8
        display_character = '8';
        break;
    case 11: //9
        display_character = '9';
        break;
    case 12: //10
        display_character = '10';
        break;
    case 13: //bomb
        display_character = 'B';
        break;
}
if (display_character != '' &amp;&amp; (owner==0 || state == 3 || just_revealed || (revealed &amp;&amp; global.track_enemy_revealed))){
    draw_set_font(fnt_tiles);
    if (owner == 0 &amp;&amp; global.track_my_revealed &amp;&amp; revealed) {
        draw_set_color(c_yellow);
    } else {
        draw_set_color(c_white);
    }
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(x+sprite_width/2, y+sprite_height/2, display_character);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
